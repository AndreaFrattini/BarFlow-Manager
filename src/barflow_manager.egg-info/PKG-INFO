Metadata-Version: 2.4
Name: barflow-manager
Version: 0.1.0
Summary: BarFlow - Gestione Finanziaria per Bar
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: lxml>=4.9.0
Requires-Dist: numpy>=1.24.0
Requires-Dist: openpyxl>=3.1.0
Requires-Dist: pandas>=2.0.0
Requires-Dist: plotly>=5.15.0
Requires-Dist: pyinstaller>=5.13.0
Requires-Dist: pyside6>=6.5.0
Requires-Dist: xlsxwriter>=3.1.0

# BarFlow - Gestione Finanziaria per Bar

**Versione 1.0.0** | **Stato: Pronta per Testing**

BarFlow è un'applicazione desktop sviluppata per aiutare i proprietari di bar e ristoranti a centralizzare, analizzare e ottenere insights dai propri dati finanziari. L'applicazione offre un'interfaccia utente moderna e intuitiva basata su PySide6, visualizzazioni interattive con Plotly, un database SQLite integrato per archiviare dati flessibili (tramite campi JSON) da diverse fonti (esportazioni POS, fatture digitali, inserimento manuale) e un motore di parsing intelligente (Pandas per Excel, lxml per XML) supportato da un wizard di mapping user-friendly.

## 🚀 Caratteristiche Principali

✅ **Implementato e Funzionante:**
- ✅ Interfaccia moderna con PySide6
- ✅ Dashboard interattiva con metriche chiave
- ✅ Gestione completa delle transazioni
- ✅ Import intelligente da file Excel con mapping automatico
- ✅ Database SQLite con supporto JSON per metadati
- ✅ Sistema di categorie personalizzabili (Bevande, Cibo, Personale)
- ✅ Calcolo automatico di profitto lordo e netto
- ✅ Export report in Excel con grafici
- ✅ Verifica coerenza granularità dati
- ✅ Supporto per importi sempre positivi con campo tipo entrata/uscita
- ✅ Gestione periodo di default (ultimo mese chiuso)
- ✅ Interfaccia completamente in italiano
- ✅ Gestione duplicati con opzioni multiple (skip, update, duplicate)
- ✅ Sistema di configurazione avanzato

## 🛠️ Requisiti Tecnici

### Requisiti di Sistema
- **Sistema Operativo**: Windows 10/11 (testato), macOS, Linux
- **Python**: 3.8 o superiore
- **Memoria RAM**: Minimo 4GB (consigliato 8GB)
- **Spazio Disco**: 500MB per l'applicazione + spazio per database

### Dipendenze Python
```
PySide6>=6.5.0          # Framework GUI
plotly>=5.15.0          # Visualizzazioni interattive
pandas>=2.0.0           # Elaborazione dati
openpyxl>=3.1.0         # Gestione file Excel
xlsxwriter>=3.1.0       # Export Excel avanzato
lxml>=4.9.0             # Parsing XML
pyinstaller>=5.13.0     # Packaging per distribuzione
```

## 📦 Installazione e Avvio

### Metodo 1: Avvio Automatico con uv (Consigliato)
1. **Installa uv** (se non già presente):
   ```bash
   # Windows PowerShell
   powershell -c "irm https://astral.sh/uv/install.ps1 | iex"
   
   # O tramite pip
   pip install uv
   ```

2. **Scarica il progetto** nella cartella desiderata
3. **Doppio click** su `start_barflow.bat`
4. Il sistema sincronizzerà automaticamente le dipendenze
5. Al primo avvio, scegli se creare dati di esempio

### Metodo 2: Avvio Manuale con uv
```bash
# 1. Naviga nella cartella del progetto
cd BarFlow-Manager

# 2. Sincronizza dipendenze
uv sync

# 3. Avvia l'applicazione
uv run python main.py

# Opzionale: Crea dati di esempio
uv run python main.py --sample-data
```

### Metodo 3: Installazione Manuale Python tradizionale
```bash
# Se uv non è disponibile, usa Python tradizionale
cd BarFlow-Manager

# Crea ambiente virtuale
python -m venv .venv

# Attiva ambiente virtuale
# Windows:
.venv\Scripts\activate
# macOS/Linux:
source .venv/bin/activate

# Installa il progetto
pip install -e .

# Avvia l'applicazione
python main.py
```

## 💼 Struttura dell'Applicazione

```
BarFlow-Manager/
├── main.py                 # File principale per avviare l'applicazione
├── start_barflow.bat      # Script di avvio automatico per Windows
├── requirements.txt       # Dipendenze Python
├── README.md             # Documentazione
├── pyproject.toml        # Configurazione progetto
└── src/                  # Codice sorgente principale
    ├── ui/               # Interfaccia utente
    │   ├── main_window.py           # Finestra principale
    │   ├── dashboard_widget.py      # Dashboard con metriche
    │   ├── transactions_widget.py   # Gestione transazioni
    │   ├── import_widget.py         # Wizard importazione
    │   ├── reports_widget.py        # Generazione report
    │   └── settings_widget.py       # Configurazioni
    ├── database/         # Gestione database
    │   └── database_manager.py      # Manager SQLite
    ├── parsers/          # Parsing file
    │   └── file_parser.py           # Parser Excel/XML
    ├── reports/          # Generazione report
    │   └── report_generator.py      # Engine report
    └── utils/            # Utilità comuni
        └── common_utils.py          # Validazione, formattazione, ecc.
```

## 🎯 Funzionalità Dettagliate

### 📊 Dashboard
- **Metriche finanziarie in tempo reale**: Entrate, spese, profitto lordo/netto
- **Grafici interattivi**: Torte per categorie, trend temporali, confronti
- **Periodo personalizzabile**: Default ultimo mese chiuso, filtri flessibili
- **Indicatori performance**: Margini, media transazioni, trend
- **Cards animate**: Visualizzazione immediata dei KPI principali

### 💰 Gestione Transazioni
- **CRUD completo**: Aggiungi, modifica, elimina transazioni
- **Filtri avanzati**: Per data, categoria, tipo, ricerca testo
- **Validazione dati**: Controlli automatici su date e importi
- **Import/Export**: Da/verso Excel con mantenimento metadati
- **Categorizzazione intelligente**: Sistema categorie con COGS

### 📁 Import Dati
- **Wizard guidato**: Processo step-by-step per import file
- **Mapping automatico**: Rilevamento intelligente colonne
- **Anteprima dati**: Visualizzazione prima dell'import finale
- **Profili riutilizzabili**: Salva mapping per import futuri
- **Gestione duplicati**: Skip, update, duplicate con scelta utente
- **Verifica coerenza**: Controllo granularità temporale

### 📈 Report e Analisi
- **Report Excel completi**: Con grafici, tabelle, analisi
- **Confronti mensili**: Trend performance nel tempo
- **Analisi categorie**: Breakdown dettagliato spese/entrate
- **Export personalizzabili**: Scegli cosa includere nel report
- **Grafici interattivi**: Plotly per visualizzazioni avanzate

### ⚙️ Configurazioni
- **Impostazioni personalizzabili**: Valuta, formati, comportamenti
- **Backup/Restore**: Gestione sicurezza dati
- **Gestione database**: Ottimizzazione e manutenzione
- **Interfaccia adattabile**: Temi, dimensioni, preferenze
- **Logging avanzato**: Per debugging e supporto

## 🗃️ Schema Database

### Tabella `transactions`
- `transaction_id` (PRIMARY KEY)
- `transaction_date` (DATE) - Data transazione
- `description` (TEXT) - Descrizione
- `amount` (DECIMAL) - Importo sempre positivo
- `is_income` (BOOLEAN) - True=entrata, False=uscita
- `category_id` (FK) - Riferimento categoria
- `source_id` (FK) - Riferimento file import
- `metadata_json` (TEXT) - Metadati aggiuntivi

### Tabella `categories`
- `category_id` (PRIMARY KEY)
- `name` (TEXT) - Nome categoria
- `is_cogs` (BOOLEAN) - Se è Cost of Goods Sold
- Categorie predefinite: Bevande (COGS), Cibo (COGS), Personale

### Tabella `source_profiles`
- `profile_id` (PRIMARY KEY)
- `name` (TEXT) - Nome profilo
- `file_type` (TEXT) - xlsx, xml
- `mapping_schema_json` (TEXT) - Schema mapping campi

### Tabella `imported_sources`
- `source_id` (PRIMARY KEY)
- `filename` (TEXT) - Nome file originale
- `file_hash` (TEXT) - Hash per rilevare duplicati
- `granularity` (TEXT) - daily, weekly, monthly
- `import_date` (TIMESTAMP)

## 🔒 Sicurezza e Privacy

- **Dati locali**: Tutto rimane sul computer dell'utente
- **Database crittografato**: SQLite con protezioni
- **Backup automatici**: Salvataggio periodico dati
- **Validazione input**: Controlli rigorosi sui dati
- **Log audit**: Tracciamento operazioni per debug

## 🚀 Roadmap Futura

### Versione 1.1 (Prossima)
- [ ] Support file XML completo
- [ ] Template POS predefiniti
- [ ] Dashboard configurabile
- [ ] Notifiche push
- [ ] API REST per integrazioni

### Versione 1.2
- [ ] Multi-utente con ruoli
- [ ] Sincronizzazione cloud
- [ ] App mobile companion
- [ ] AI per categorizzazione automatica
- [ ] Plugin system

### Versione 2.0
- [ ] Multi-location
- [ ] Inventory management
- [ ] Staff management
- [ ] Advanced analytics con ML
- [ ] Integrazione contabilità

## 🐛 Testing e Debugging

### Creazione Dati di Test
```bash
# Crea 50 transazioni di esempio
python main.py --sample-data
```

### Log e Debugging
- Log salvati in: `%LOCALAPPDATA%\BarFlow\logs\`
- Database in: `%LOCALAPPDATA%\BarFlow\barflow.db`
- Configurazioni: `%LOCALAPPDATA%\BarFlow\config.json`

## 📞 Supporto e Contributi

### Segnalazione Bug
1. Riprodurre il problema
2. Raccogliere log da `%LOCALAPPDATA%\BarFlow\logs\`
3. Creare issue con:
   - Descrizione dettagliata
   - Steps per riprodurre
   - File log allegati
   - Screenshot se applicabile

### Richieste Feature
- Aprire issue con tag "enhancement"
- Descrivere caso d'uso specifico
- Fornire mockup se disponibili

## 📄 Licenza e Credits

**Autore**: Andrea Frattini & BarFlow Team  
**Versione**: 1.0.0  
**Data**: Ottobre 2025  
**Licenza**: Proprietaria  

**Tecnologie utilizzate**:
- PySide6 (Qt for Python)
- Plotly (Visualizzazioni)
- Pandas (Data processing)
- SQLite (Database)
- PyInstaller (Packaging)

---

**🎉 BarFlow è pronto per essere testato e utilizzato in ambiente di produzione!**

Per domande o supporto, contattare il team di sviluppo.
